"""
Django settings for velodrome project.

Generated by 'django-admin startproject' using Django 1.8b2.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
from copy import deepcopy
import datetime as dt
import logging
import os
import shlex
import sys

from configurations import Configuration, values
from django.urls import reverse
import psycopg2.extensions
import psycopg2.extras
import raven
import requests
from social_core.pipeline import DEFAULT_AUTH_PIPELINE

from .common.utils import env_data, env_val, env_val_float

# Setup logging to catch everything until it is setup through Django.
logger = logging.getLogger(__name__)
logging.raiseExceptions = True
logging.basicConfig(level=logging.NOTSET)


class Django:
    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    DOCS_DIR = os.path.join(BASE_DIR, 'docs')

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.SecretValue()

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False

    # Application definition

    INSTALLED_APPS = [
        'dal',
        'dal_select2',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'django.contrib.gis',
        'django.contrib.postgres',
        'django.contrib.sites',
        'django_extensions',
        'rest_framework',
        'rest_framework.authtoken',
        'velodrome.lock8',
        'velodrome.advanced_devices.apps.BaseConfig',
        'velodrome.custom_tagging.apps.BaseConfig',
        'velodrome.features_flags.apps.BaseConfig',
        'mptt',
        'django_fsm',
        'django_fsm_log',
        'fsm_admin',
        'social_django',
        'djoser',
        'corsheaders',
        'rules.apps.AutodiscoverRulesConfig',
        'refreshtoken',
        'reversion',
        'pinax.stripe',
        'rest_framework_gis',
        'django_ses',
        'log_request_id',
        'django_filters',
        'drf_yasg',
    ]

    MIDDLEWARE = [
        'log_request_id.middleware.RequestIDMiddleware',
        'velodrome.lock8.middleware.ELBHealthCheckMiddleware',
        'velodrome.lock8.middleware.VersionMiddleware',
        # CorsMiddleware must be before WhiteNoiseMiddleware
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.common.CommonMiddleware',
        'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',  # noqa: E501
        'django.middleware.http.ConditionalGetMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'reversion.middleware.RevisionMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'corsheaders.middleware.CorsPostCsrfMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # possible will be required in an api with support of
        # the multi-organization request
        # 'velodrome.lock8.middleware.OrganizationFilterMiddleware',
        'velodrome.advanced_devices.middleware.OrganizationInThreadMiddleware',  # noqa: E501
    ]

    ROOT_URLCONF = 'velodrome.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                os.path.join(BASE_DIR, 'velodrome', 'lock8', 'templates'),
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'social_django.context_processors.backends',
                    'social_django.context_processors.login_redirect',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'velodrome.wsgi.application'

    # This is used to serve favicon.ico.
    WHITENOISE_ROOT = os.path.join(BASE_DIR, 'velodrome', 'lock8', 'static')

    # Database
    # https://docs.djangoproject.com/en/dev/ref/settings/#databases

    @property
    def DATABASES(self):
        # Do not use connection pooling with threaded "runserver".
        is_runserver_with_threading = (
            sys.argv[1:2] == ['runserver'] and
            '--nothreading' not in sys.argv[2:]
        )
        conn_max_age = 0 if is_runserver_with_threading else 1800
        databases = {}
        for name, environ_name, default in [
                ('default', 'DATABASE_URL', False),
                ('trackings', 'DATABASE_TRACKINGS_URL', {})]:
            value = values.DatabaseURLValue(alias=name,
                                            environ_name=environ_name,
                                            conn_max_age=conn_max_age).value
            if value:
                conf = value[name]
                conf['ATOMIC_REQUESTS'] = True
                conf.setdefault('OPTIONS', {}).setdefault(
                    'connect_timeout', 30)
                conf.setdefault('TEST', {}).setdefault('SERIALIZE', False)
            else:
                if default is False:
                    raise ValueError('Could not setup databases: '
                                     'missing env var {}'.format(environ_name))
                value = default
            databases.update(value)
        return databases

    TRACKINGS_DB = values.Value(default='trackings')

    DATABASE_ROUTERS = ['velodrome.lock8.db_routers.LoadBalancerRouter']
    # Internationalization
    # https://docs.djangoproject.com/en/dev/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'
    USE_TZ = True
    USE_L10N = False
    DATE_FORMAT = 'Y-m-d'
    TIME_FORMAT = 'H:i:s'
    DATETIME_FORMAT = DATE_FORMAT + ' ' + TIME_FORMAT

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/dev/howto/static-files/

    STATIC_HOST = values.Value(default='')

    @property
    def STATIC_URL(self):
        return self.STATIC_HOST + '/static/'

    AUTH_USER_MODEL = 'lock8.User'

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    EMAIL_BACKEND = 'velodrome.lock8.email.SESBackend'

    ALLOWED_HOSTS = values.ListValue(['api.lock8.me'])

    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True

    STATIC_ROOT = values.PathValue('/srv/velodrome/static')

    LOGGING = {
        'version': 1,
        'filters': {
            'request_id': {
                '()': 'log_request_id.filters.RequestIDFilter'},
            'ec2_instance_id': {
                '()': 'velodrome.log_filters.EC2InstanceIdFilter'},
        },
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'cloud_with_request_id': {
                'class': 'logging.StreamHandler',
                'filters': ['request_id', 'ec2_instance_id'],
                'formatter': 'cloud_with_request_id_formatter',
            },
            'cloud': {
                'class': 'logging.StreamHandler',
                'filters': ['ec2_instance_id'],
                'formatter': 'cloud_formatter',
            },
        },
        'formatters': {
            'basic': {
                'format': logging.BASIC_FORMAT,
            },
            'verbose': {
                'format': '%(asctime)s:%(levelname)s:%(name)s %(message)s'
            },
            'cloud_formatter': {
                'format': ('%(asctime)s:%(levelname)s:%(ec2_instance_id)s:'
                           '%(name)s: %(message)s')
            },
            'cloud_with_request_id_formatter': {
                'format': ('%(asctime)s:%(levelname)s:%(ec2_instance_id)s:'
                           '%(name)s:[%(request_id)s]: %(message)s')
            }
        },
        'loggers': {
            'django': {
                'level': 'INFO',
            },
            'velodrome.lock8': {
                'level': 'DEBUG',
            },
            'velodrome.lock8.management.commands.lock_messages_consumer': {
                'level': 'INFO',
            },
            'botocore': {
                'level': 'WARNING',
            },
            'boto3': {
                'level': 'WARNING',
            },
            # boto logs just data for failed connections, but also raises.
            'boto.connection': {
                'propagate': False,
            },
            'django_ses': {
                'level': 'DEBUG'
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    }
    LOGIN_URL = '/admin/'

    @property
    def MEDIA_URL(self):
        """Validate env setting, but default to /media/."""
        return values.URLValue(default='', environ_prefix='',
                               environ_name='DJANGO_MEDIA_URL') or '/media/'

    DEFAULT_FROM_EMAIL = 'info@noa.one'

    @property
    def CACHES(self):
        caches = values.CacheURLValue('redis://127.0.0.1:6379/0').value

        def setup_cache(name, prefix=None, ttl=300):
            if prefix is None:
                prefix = name
            caches[name] = deepcopy(caches['default'])
            caches[name]['KEY_PREFIX'] = prefix
            caches[name]['TIMEOUT'] = ttl

        setup_cache('telit_trackings')
        setup_cache('auth_codes')
        setup_cache('publisher')
        setup_cache('crm', ttl=dt.timedelta(days=7).total_seconds())
        setup_cache('failed_logins', ttl=self.FAILED_LOGINS_COOLOFF)
        return caches

    PASSWORD_HASHERS = [
        'django.contrib.auth.hashers.Argon2PasswordHasher',
        'django.contrib.auth.hashers.PBKDF2PasswordHasher',
        'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    ]
    DJANGO_REDIS_IGNORE_EXCEPTIONS = True
    SITE_ID = 1


class DjangoRestFramework:
    REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': (
            'velodrome.lock8.permissions.IsAuthenticated',
            'velodrome.lock8.permissions.DjangoObjectPermissions',
        ),
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'velodrome.lock8.jwt_extensions.JSONWebTokenAuthentication',
            'velodrome.lock8.authentication.TokenAuthentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.BasicAuthentication',
        ),
        'DEFAULT_FILTER_BACKENDS': (
            'velodrome.lock8.filters.CustomDjangoFilterBackend',
        ),
        'DEFAULT_VERSIONING_CLASS':
            'velodrome.lock8.versioning.AcceptHeaderVersioning',
        'DEFAULT_PAGINATION_CLASS':
        'velodrome.lock8.pagination.PageNumberPagination',
        'ALLOWED_VERSIONS': ('1.0',),
        'EXCEPTION_HANDLER': 'velodrome.lock8.utils.api_exception_handler',
        'DEFAULT_METADATA_CLASS': 'velodrome.lock8.metadata.BlankMetadata',
    }


class Authentication:
    AUTHENTICATION_BACKENDS = (
        'rules.permissions.ObjectPermissionBackend',
        'velodrome.lock8.social_backends.Lock8FacebookOAuth2',
        'velodrome.lock8.social_backends.Lock8GoogleOAuth2',
        'velodrome.lock8.authentication.ModelBackend',
        'velodrome.lock8.saml_api.SAMLAuth',
    )
    SOCIAL_AUTH_USER_MODEL = 'lock8.User'

    SOCIAL_AUTH_LOCK8_GOOGLE_OAUTH2_KEY = values.SecretValue()
    SOCIAL_AUTH_LOCK8_GOOGLE_OAUTH2_SECRET = values.SecretValue()
    USE_UNIQUE_USER_ID = True
    SOCIAL_AUTH_LOCK8_FACEBOOK_OAUTH2_KEY = values.SecretValue()
    SOCIAL_AUTH_LOCK8_FACEBOOK_OAUTH2_SECRET = values.SecretValue()
    JWT_SECRET_KEY = values.SecretValue()
    JWT_SECRET_KEY.setup('JWT_SECRET_KEY')
    JWT_AUTH = {
        'JWT_PAYLOAD_HANDLER':
        'velodrome.lock8.jwt_extensions.jwt_payload_handler',
        'JWT_RESPONSE_PAYLOAD_HANDLER':
        'velodrome.lock8.jwt_extensions.jwt_response_payload_handler',
        'JWT_ALGORITHM': 'HS512',
        'JWT_ALLOW_REFRESH': True,
        'JWT_LEEWAY': 10,
        'JWT_EXPIRATION_DELTA': dt.timedelta(seconds=1800),
        'JWT_SECRET_KEY': JWT_SECRET_KEY.value,
    }
    JWT_REFRESH_TOKEN_MAX_DURATION = dt.timedelta(days=30)
    index = DEFAULT_AUTH_PIPELINE.index(
        'social_core.pipeline.user.create_user') + 1
    SOCIAL_AUTH_PIPELINE = DEFAULT_AUTH_PIPELINE[:index] + (
        'velodrome.lock8.pipeline.user_create_refreshtoken',
        'velodrome.lock8.pipeline.create_affiliations',
        'velodrome.lock8.pipeline.send_welcome_email',
    ) + DEFAULT_AUTH_PIPELINE[index:] + (
        'velodrome.lock8.pipeline.user_avatar',
    )
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa
            'OPTIONS': {
                'min_length': 8,
            }
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa
        },
    ]
    # electronic lock key server (project for Allegion)
    # access configuration
    KEY_SERVER_API_PASSWORD = (
        env_val("KEY_SERVER_API_PASSWORD") or (
            # default password
            "FOMhvPgotb3IU0TzMR2qW5iP0M0SQYlYMVEWzAef"
        )
    )
    KEY_SERVER_API_TOKEN_MAX_AGE = (
        env_val_float("KEY_SERVER_API_TOKEN_MAX_AGE") or (
            # default 1 day
            24 * 3600
        )
    )


class SamlAuthentication:
    """SAML integration configuration.
    """
    SOCIAL_AUTH_SAML_SP_ENTITY_ID = env_val(
        'SOCIAL_AUTH_SAML_SP_ENTITY_ID'
    ) or 'noabackend'
    SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = env_data(
        'SOCIAL_AUTH_SAML_SP_PUBLIC_CERT'
    )
    SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = env_data(
        'SOCIAL_AUTH_SAML_SP_PRIVATE_KEY'
    )

    @property
    def SOCIAL_AUTH_SAML_ORG_INFO(self) -> dict:
        return {
            'en-US': {
                'name': 'Noa Technologies',
                'displayname': 'Noa Technologies, Inc.',
                'url': self.FRONTEND_URL,
            }
        }

    @property
    def SOCIAL_AUTH_SAML_TECHNICAL_CONTACT(self) -> dict:
        return {
            'givenName': self.DEFAULT_FROM_EMAIL,
            'emailAddress': self.DEFAULT_FROM_EMAIL
        }

    @property
    def SOCIAL_AUTH_SAML_SUPPORT_CONTACT(self) -> dict:
        return self.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT

    @property
    def SOCIAL_AUTH_SAML_ENABLED_IDPS(self) -> dict:
        noa_google = {
            'entity_id': (
                'https://accounts.google.com/o/saml2?idpid=C03y878n5'
            ),
            'url': (
                'https://accounts.google.com/o/saml2/idp?idpid=C03y878n5'
            ),
            'x509cert': env_data('NOA_GOOGLE_SAML_X509CRT'),
            'mapping': {
                'email': 'email',
                'first_name': 'first_name',
                'last_name': 'last_name',
                'organization': [
                    # name from attr, or default organization
                    'department', None
                ],
            }
        }
        return {
            'noa_google': noa_google,
        }


class LockMessages:
    ZMQ_TRACKING_RPC_ENDPOINT = values.Value()
    DISCARD_FUTURE_TRACKING_DURATION = dt.timedelta(minutes=10)


class SmartBicycle:
    SMART_BICYCLE_SQS_QUEUE_NAME = values.Value()


class Celery:
    CELERY_BROKER_URL = values.Value(default='sqs://')

    @property
    def CELERY_BROKER_TRANSPORT_OPTIONS(self):
        return {
            'region': 'eu-west-1',
            'visibility_timeout': 300,  # 5mn
            'polling_interval': 3,
            'queue_name_prefix': 'velodrome-celery-{}-'.format(
                self.ENVIRONMENT),
        }

    CELERY_TASK_ALWAYS_EAGER = False
    CELERY_WORKER_SEND_TASK_EVENTS = False
    # Prevent creating useless queues (not supported for SQS).
    # Ref: https://github.com/celery/celery/issues/3197#issuecomment-225759929.
    CELERY_WORKER_ENABLE_REMOTE_CONTROL = False
    CELERY_ACCEPT_CONTENT = ['msgpack']
    CELERY_TASK_SERIALIZER = 'msgpack'
    # Work around issues with SQS.
    # https://github.com/celery/celery/issues/3759
    # https://github.com/celery/kombu/issues/746
    CELERY_WORKER_POOL = values.Value(
        default='celery.concurrency.solo:TaskPool')
    CELERY_WORKER_HIJACK_ROOT_LOGGER = False


class CRM:
    AUTO_LOGIN_CODE_EXPIRY = dt.timedelta(days=1)
    FRONTEND_URL = values.URLValue('https://fms.noa.one')
    FRONTEND_BASE_URL = values.URLValue('https://rider.noa.one/')
    FRONTEND_ACTIVATE_URL = values.URLValue(
        'https://rider.noa.one/account/activate')
    FRONTEND_INVITATION_URL = values.URLValue(
        'https://rider.noa.one/invitation')
    FRONTEND_RESET_URL = values.URLValue(
        'https://rider.noa.one/reset')
    HARDWARE_TEAM_EMAIL_ADDRESS = 'hardware@noa.one'
    DEFAULT_IDLE_BICYCLE_DURATION = dt.timedelta(days=15)
    DEFAULT_INACTIVE_DURATION = dt.timedelta(days=1, minutes=5)
    ACTIVATION_EMAIL_SUBJECT = 'Account activation'
    RESET_EMAIL_SUBJECT = 'Reset password'
    SUSPICIOUS_REGISTRATION_EMAIL_SUBJECT = (
        'Suspicious registration detected using your email address.')


class Dealer:
    DEALER_TYPE = 'git'
    ALLOW_VCS_REVISION = True
    VCS_PATH = None


class CORS:
    CORS_ORIGIN_WHITELIST = values.ListValue(['https://fms.lock8.me',
                                              'https://fms.noa.one',
                                              'https://fms-staging.noa.one'])
    CORS_ALLOW_CREDENTIALS = True
    CORS_URLS_REGEX = r'^/api/.*$'


class LockImport:
    PRIVATE_BUCKET_NAME = values.Value('lock8-private')


class DjangoStorages:
    AWS_STORAGE_BUCKET_NAME = values.Value('lock8')
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_FILE_OVERWRITE = False
    AWS_REGION_NAME = values.Value('eu-west-1')


try:
    import raven.contrib.django.client
except ImportError:
    pass
else:
    class DjangoClient(raven.contrib.django.client.DjangoClient):
        def update_data_from_request(self, request, result):
            super().update_data_from_request(request, result)

            if hasattr(request, 'id'):
                extra = result.setdefault('extra', {})
                extra['request_id'] = request.id

            user = getattr(request, 'user', None)
            if user and user.is_authenticated:
                user_info = result['user']
                orgs = []
                if user.organization:
                    user_info['whitelabel_org'] = user.organization
                    orgs = [user.organization]
                else:
                    orgs = []
                user_info['affiliations'] = []
                for aff in user.affiliations.all():
                    user_info['affiliations'].append(
                        (aff.organization, aff.role)
                    )
                    orgs.append(aff.organization)
                result.setdefault('tags', {})
                if len(f'{orgs}') > 200:
                    orgs_shrunk = [f'{x.name}({x.pk})' for x in orgs]
                    if len(f'{orgs_shrunk}') > 200:
                        orgs_shrunk = [str(x.pk) for x in orgs]
                    result['tags']['orgs'] = orgs_shrunk
                else:
                    result['tags']['orgs'] = orgs

            return result

        def build_msg(self, *args, **kwargs):
            from django.conf import settings

            import velodrome

            data = super().build_msg(*args, **kwargs)

            exc_info = kwargs.get('exc_info')
            if exc_info is not None:
                sentry_extra = getattr(exc_info[1], 'sentry_extra', None)
                if sentry_extra is not None:
                    data['extra'].update(sentry_extra)

            tags = data.setdefault('tags', {})
            tags['ec2_instance_id'] = getattr(settings, 'EC2_INSTANCE_ID', '-')
            tags['velodrome_version'] = velodrome.VERSION
            tags['argv'] = ' '.join(shlex.quote(x) for x in sys.argv)
            return data


class Raven:
    RAVEN_DSN = values.SecretValue()
    SENTRY_CLIENT = 'velodrome.settings.DjangoClient'
    SENTRY_SLOW_REQUEST_DURATION_THRESHOLD = env_val_float(
        'SENTRY_SLOW_REQUEST_DURATION_THRESHOLD'
    ) or 5.0

    @classmethod
    def setup(cls):
        super().setup()
        cls.INSTALLED_APPS.append('raven.contrib.django.raven_compat')
        cls.MIDDLEWARE.append(
            'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware')  # noqa: E501
        cls.MIDDLEWARE.append(
            'raven.contrib.django.raven_compat.middleware.DjangoRestFrameworkCompatMiddleware')  # noqa: E501
        cls.LOGGING['handlers']['sentry'] = {
            'level': 'WARNING',
            'class': 'velodrome.logging.SentryHandler',
        }
        cls.LOGGING['root']['handlers'].append('sentry')
        cls.LOGGING['loggers']['raven'] = {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        }
        cls.MIDDLEWARE.insert(
            cls.MIDDLEWARE.index(
                'corsheaders.middleware.CorsMiddleware') + 1,
            'velodrome.lock8.middleware.LogSlowRequestsMiddleware')

    @property
    def RAVEN_CONFIG(self):
        dsn = self.RAVEN_DSN
        return {
            'dsn': dsn,
            'release': raven.fetch_git_sha(os.path.abspath(os.curdir)),
            'CELERY_LOGLEVEL': logging.INFO,
            'CELERY_IGNORE_EXPECTED': True,
            'site': self.SITE_ID,
            # Add stack traces to all events (e.g. logging).
            'auto_log_stacks': True,
        }


class RentingSchemes:
    DEFAULT_MAX_RESERVATION_DURATION = dt.timedelta(minutes=15)
    DEFAULT_MAX_INACTIVE_RENTAL_SESSION_DURATION = dt.timedelta(minutes=10)


class RentalSchemes:
    CURRENCIES = (
        ('usd', 'U.S. Dollars',),
        ('gbp', 'Pounds (GBP)',),
        ('eur', 'Euros',),
    )


class Statistics:
    # distance in meters we consider a bicycle stationary.
    STATIONARY_RADIUS = 50


class Stripe:
    PINAX_STRIPE_PUBLIC_KEY = values.Value()
    PINAX_STRIPE_SECRET_KEY = values.SecretValue()
    PINAX_STRIPE_API_VERSION = '2017-08-15'
    PINAX_STRIPE_SEND_EMAIL_RECEIPTS = False
    DEFAULT_CURRENCY = 'eur'
    STRIPE_EVENT_SQS_QUEUE_NAME = values.Value('stripe-events-velodrome')
    STRIPE_EVENT_SQS_WAIT_TIME_SECONDS = values.IntegerValue(20)
    STRIPE_EVENT_SQS_MAX_RETRY = values.IntegerValue(3)
    STRIPE_CLIENT_ID = values.Value()
    STRIPE_LIVEMODE = False


class ThumbnailGenerator:
    CACHE_LENGTH = 2592000  # 30 days
    CACHE_NAME = 'thumbnails'
    CREATE_IMAGES_ON_DEMAND = True


def show_debug_toolbar(request):
    import threading

    from debug_toolbar.middleware import DebugToolbarMiddleware

    if (DebugToolbarMiddleware.debug_toolbars.get(
            threading.current_thread().ident)):
        return False
    if not int(request.GET.get('use_ddt', not request.path.startswith(
            reverse('api-docs')))):
        return False
    if hasattr(request, 'user'):
        return (request.user and
                request.user.groups.filter(name='Debug').exists())
    from debug_toolbar.middleware import show_toolbar as ddt_show_toolbar
    return ddt_show_toolbar(request)


class DjangoExtensions:
    SHELL_PLUS_PRE_IMPORTS = [
        'pinax',
        'stripe',
    ]


class DebugToolbar:
    "Generic settings for django-debug-toolbar"
    DEBUG_TOOLBAR_PATCH_SETTINGS = False
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': 'velodrome.settings.show_debug_toolbar'
    }

    @classmethod
    def setup(cls):
        super().setup()

        # As early as possible, but after any encoding, e.g. gzip.
        # Also after AuthenticationMiddleware, which provides
        # request.user (used in our show_debug_toolbar callback).
        cls.MIDDLEWARE.insert(
            cls.MIDDLEWARE.index(
                'whitenoise.middleware.WhiteNoiseMiddleware') + 1,
            'debug_toolbar.middleware.DebugToolbarMiddleware')
        cls.MIDDLEWARE.insert(
            cls.MIDDLEWARE.index(
                'django.contrib.auth.middleware.AuthenticationMiddleware') + 1,  # noqa
            'debug_toolbar.middleware.DebugToolbarMiddleware')

        cls.INSTALLED_APPS.append('debug_toolbar')

    # Add ProfilingPanel.
    # Currently broken during admin login, but can be used afterwards.
    # https://github.com/django-debug-toolbar/django-debug-toolbar/issues/792
    # # XXX: could use PANELS_DEFAULTS, which is not importable as of now from here (https://github.com/django-debug-toolbar/django-debug-toolbar/issues/801).  # noqa
    # DEBUG_TOOLBAR_PANELS = [
    #     'debug_toolbar.panels.profiling.ProfilingPanel',
    #     # Defaults:
    #     'debug_toolbar.panels.versions.VersionsPanel',
    #     'debug_toolbar.panels.timer.TimerPanel',
    #     'debug_toolbar.panels.settings.SettingsPanel',
    #     'debug_toolbar.panels.headers.HeadersPanel',
    #     'debug_toolbar.panels.request.RequestPanel',
    #     'debug_toolbar.panels.sql.SQLPanel',
    #     'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    #     'debug_toolbar.panels.templates.TemplatesPanel',
    #     'debug_toolbar.panels.cache.CachePanel',
    #     'debug_toolbar.panels.signals.SignalsPanel',
    #     'debug_toolbar.panels.logging.LoggingPanel',
    #     'debug_toolbar.panels.redirects.RedirectsPanel',
    # ]


class ELBHealthCheck:
    ELB_HEALTH_CHECK_PATH = values.Value('_elb')


class SES:
    AWS_SES_REGION_NAME = 'eu-west-1'
    AWS_SES_REGION_ENDPOINT = 'email.eu-west-1.amazonaws.com'


class CloudLogging:
    @property
    def EC2_INSTANCE_ID(self):
        try:
            return self._EC2_INSTANCE_ID
        except AttributeError:
            try:
                response = requests.get(
                    'http://169.254.169.254/latest/meta-data/instance-id',
                    timeout=(5, 5),
                )
            except Exception:
                self._EC2_INSTANCE_ID = 'EC2_UNKNOWN'
            else:
                self._EC2_INSTANCE_ID = response.text
            return self._EC2_INSTANCE_ID

    @classmethod
    def setup(cls):
        super().setup()

        if (sys.argv[0].endswith('manage.py') and not
                sys.argv[1].startswith('runserver')):  # management commands
            handler = 'cloud'
        else:
            handler = 'cloud_with_request_id'
        cls.LOGGING['handlers']['console'] = cls.LOGGING['handlers'][handler]

        cls.MIDDLEWARE.insert(
            0, 'velodrome.lock8.middleware.EC2InstanceIdMiddleware')

    REQUEST_ID_RESPONSE_HEADER = 'X-Noa-RequestId'


class KeySafeCloud:
    KEY_SAFE_BASE_URI = 'https://keysafe-cloud.appspot.com/api/v1'
    KEY_SAFE_API_KEY = values.SecretValue()


class SecurityTokenService:
    STS_BASE_URL = values.URLValue('https://sts.noa.one')
    STS_AUTH_TOKEN = values.SecretValue()

    @property
    def STS_JWT_ISSUER(self):
        return os.environ.get('DJANGO_STS_JWT_ISSUER', (
            'sts' if self.ENVIRONMENT == 'prod'
            else 'sts-{}'.format(self.ENVIRONMENT)))


class FSM:
    DJANGO_FSM_LOG_IGNORED_MODELS = []
    DJANGO_FSM_LOG_STORAGE_METHOD = 'velodrome.lock8.django_fsm_log.DryRunReadyBackend'  # noqa: E501


class Profiling:
    @property
    def CACHES(self):
        caches = super().CACHES
        for cache in caches.values():
            cache['CACHE_BACKEND'] = cache['BACKEND']
            cache['BACKEND'] = 'speedinfo.backends.proxy_cache'
        return caches

    @classmethod
    def setup(cls):
        super().setup()

        cls.INSTALLED_APPS.append('speedinfo')
        # As per doc, could go earlier maybe also?!
        cls.MIDDLEWARE.append('speedinfo.middleware.ProfilerMiddleware')


class DjOser:
    DJOSER = {
        'SERIALIZERS': {
            'user_create':
            'velodrome.lock8.serializers.EmailRegistrationSerializer',
        },
    }


class BaseSettings(
    Django, DjangoRestFramework, Authentication, SamlAuthentication,
    LockMessages, Celery, CRM, Dealer, CORS,
    LockImport, DjangoStorages, SmartBicycle,
    Statistics, RentingSchemes, RentalSchemes, Stripe,
    ThumbnailGenerator, ELBHealthCheck, SES, KeySafeCloud,
    SecurityTokenService, FSM, DjOser
):
    IS_TESTER = False
    DYNAMODB_TABLE_SUFFIX = 'test'

    FAILED_LOGINS_MAX_ATTEMPTS = 6
    FAILED_LOGINS_COOLOFF = 300

    @classmethod
    def setup(cls):
        super().setup()
        logging.info("settings.ENVIRONMENT: {}".format(cls.ENVIRONMENT))


class Dev(BaseSettings, DebugToolbar, DjangoExtensions, Configuration):
    DEBUG = values.BooleanValue(True)
    MEDIA_ROOT = '/tmp/images'
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    CORS_ORIGIN_ALLOW_ALL = True

    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

    # Use the following for non-eager local development.
    # CELERY_BROKER_URL = values.Value(default='redis://')
    # CELERY_RESULT_BACKEND = values.Value(default='redis://')
    # # For CELERY_ACCEPT_CONTENT.
    # CELERY_RESULT_SERIALIZER = values.Value(default='msgpack')

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    DJANGO_REDIS_IGNORE_EXCEPTIONS = False
    SECURE_SSL_REDIRECT = False
    ENVIRONMENT = 'dev'
    ALLOWED_HOSTS = values.ListValue([
        '127.0.0.1', 'localhost', '[::1]', 'testserver', 'api-dev.noa.one'])

    # Used by DDT's show_toolbar callback.
    INTERNAL_IPS = ['127.0.0.1']

    @classmethod
    def setup(cls):
        super().setup()

        # Always serve static files with whitenoise during dev to detect
        # regressions faster.
        index_of_staticfiles = cls.INSTALLED_APPS.index(
            'django.contrib.staticfiles')
        cls.INSTALLED_APPS.insert(index_of_staticfiles,
                                  'whitenoise.runserver_nostatic')

        cls.LOGGING['handlers']['console'] = (
            cls.LOGGING['handlers']['cloud_with_request_id'])
        cls.LOGGING['loggers']['boto3']['level'] = 'INFO'

        if not cls.IS_TESTER:
            cls.REST_FRAMEWORK['ALLOWED_VERSIONS'] += (None,)


class Testing(Profiling, BaseSettings, DebugToolbar, Raven, CloudLogging,
              Configuration):
    VCS_PATH = '/srv/velodrome/src'
    MEDIA_ROOT = '/srv/velodrome/images'
    ENVIRONMENT = 'test'


class Tester(Dev):
    # Fake important credentials to ensure tests will fail without mocking.
    PINAX_STRIPE_PUBLIC_KEY = 'fake-stripe-pk'
    PINAX_STRIPE_SECRET_KEY = 'fake-stripe-sk'

    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

    STATICFILES_STORAGE = Configuration.STATICFILES_STORAGE
    IS_TESTER = True
    FAILED_LOGINS_MAX_ATTEMPTS = 10000

    @classmethod
    def setup(cls):
        super().setup()
        cls.INSTALLED_APPS.remove('whitenoise.runserver_nostatic')

        # Whitenoise slows down the tests dramatically, since it adds the
        # static files again and again!  An alternative might be to use an
        # empty STATIC_ROOT, or some other settings - but this appears to
        # serve the purpose.
        # Ref: https://github.com/evansd/whitenoise/issues/94
        # When using live_server tests this probably needs to be reconsidered,
        # to actually test if whitenoise is working.
        cls.MIDDLEWARE.remove(
            'whitenoise.middleware.WhiteNoiseMiddleware')

        # Handle SIGINT/KeyboardInterrupt/Control-C while waiting for data.
        psycopg2.extensions.set_wait_callback(psycopg2.extras.wait_select)

    @property
    def CACHES(self):
        caches = super().CACHES
        for cache in caches.values():
            cache['OPTIONS'] = {'REDIS_CLIENT_CLASS':
                                'fakeredis.FakeStrictRedis'}
        return caches


class Travis(Tester):

    @classmethod
    def setup(cls):
        super().setup()
        cls.LOGGING['handlers']['console']['formatter'] = 'verbose'


class Production(Profiling, BaseSettings, DebugToolbar, Raven, CloudLogging,
                 Configuration):
    VCS_PATH = '/srv/velodrome/src'
    ENVIRONMENT = 'prod'
    STRIPE_LIVEMODE = True
    DYNAMODB_TABLE_SUFFIX = 'prod'


class DevProdReadonly(Dev):
    SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
    DYNAMODB_TABLE_SUFFIX = 'prod'
    # Use the same storage as Prod.
    DEFAULT_FILE_STORAGE = Production.DEFAULT_FILE_STORAGE

# jim test change to practice pushing
