# -*- coding: utf-8 -*-
# Generated by Django 1.11.3.dev20170628143432 on 2017-06-28 14:50
from __future__ import unicode_literals

import functools
import re
import uuid

import concurrency.fields
from django.conf import settings
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.validators
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import django_fsm
import mptt.fields

import velodrome.lock8.fields
import velodrome.lock8.models
import velodrome.lock8.utils
import velodrome.lock8.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('lock8', '0001_initial_user'),
        ('pinax_stripe', '0002_auto_20151205_1451'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone_number', models.CharField(blank=True, max_length=128)),
                ('text_address', models.TextField(default='')),
            ],
            options={
                'verbose_name_plural': 'addresses',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('role', models.CharField(choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], default='renter', max_length=25)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50, null=True)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('role', models.CharField(blank=True, choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], max_length=25)),
                ('roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], max_length=25), size=None)),
                ('object_id', models.PositiveIntegerField()),
                ('alert_type', models.CharField(choices=[('lock.bat.low', 'Low Battery'), ('bicycle.ride_outside', 'Outside Service Area'), ('lock.no_tracking', 'Device Not Reporting'), ('bicycle.return_outside', 'Outside Dropzone'), ('bicycle.lost_reported', 'Lost Bicycle Reported'), ('bicycle.outside_operational_period', 'Bicycle is used outside operational period'), ('bicycle.too_long_idle', 'No Recent Rides'), ('bicycle.left_unlocked', 'Bicycle left unlocked'), ('lock.shutdown', 'Device Shutdown'), ('lock.locked_wo_cable', 'Bicycle was locked without a cable'), ('bicycle.bike_stolen', 'Bicycle being stolen'), ('lock.alarm_triggered', 'Alarm of lock triggered')], max_length=64)),
                ('message', models.TextField(blank=True)),
                ('context', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='Context provided during creation')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(velodrome.lock8.models.FinalCausalityModelMixin, models.Model, velodrome.lock8.models.NotificationMessageDeleteMixin, velodrome.lock8.models.SendableModelMixin, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='AlertMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_messages', related_query_name='alert_message', to='lock8.Alert')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_messages', related_query_name='alert_message', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AxaLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('remote_id', models.BigIntegerField(blank=True, default=None, null=True)),
                ('uid', models.CharField(db_index=True, max_length=20, unique=True, verbose_name='Bleid of device and lock_uid from remote API.')),
                ('claim_code_at_creation', models.UUIDField()),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bicycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('old_tracking_attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tracking_attributes', default=dict, null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=128)),
                ('reference', models.CharField(blank=True, max_length=128, null=True)),
                ('service_identifier', models.CharField(blank=True, db_index=True, max_length=128)),
                ('serial_number', models.CharField(blank=True, db_index=True, max_length=128)),
                ('description', models.TextField(blank=True, default='')),
                ('short_id', models.CharField(default=velodrome.lock8.utils.make_short_id, max_length=12, unique=True)),
                ('state', django_fsm.FSMField(db_index=True, default='in_maintenance', max_length=50)),
                ('axa_lock', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lock8.AxaLock')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BicycleMetaData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('recoverability_score', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('needs_attention_score', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('bicycle', models.OneToOneField(blank=True, default=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='lock8.Bicycle')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BicycleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('name', models.CharField(blank=True, max_length=128)),
                ('alert_types_to_task', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='Mapping of alert types, severity level.\nWhen present, a Task will be created.', validators=[velodrome.lock8.validators.validate_alert_types_to_task])),
                ('feedback_auto_escalate_severity', models.CharField(blank=True, choices=[('low', 'Low severity'), ('medium', 'Medium severity'), ('high', 'High severity')], max_length=25, null=True)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='BicycleModelMaintenanceRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('description', models.TextField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('fixed_date', models.DateTimeField(blank=True, null=True)),
                ('recurring_time', models.DurationField(blank=True, null=True)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('role', models.CharField(choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], default='mechanic', max_length=25)),
                ('severity', models.CharField(blank=True, choices=[('low', 'Low severity'), ('medium', 'Medium severity'), ('high', 'High severity')], max_length=25, null=True)),
                ('state', django_fsm.FSMField(db_index=True, default='active', max_length=50)),
                ('bicycle_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_rules', related_query_name='maintenance_rule', to='lock8.BicycleModel')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BicycleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=50)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClientApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('name', models.CharField(max_length=128)),
                ('scopes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('bicycle:read', 'bicycle:read'), ('organization:read', 'organization:read'), ('trip:read', 'trip:read')], max_length=64), blank=True, default=list, size=None)),
                ('remote_uuid', models.UUIDField()),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('name', models.CharField(max_length=128)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('image', models.ImageField(blank=True, max_length=254, upload_to='feedbacks')),
                ('message', models.TextField(blank=True, default='')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('severity', models.CharField(blank=True, choices=[('low', 'Low severity'), ('medium', 'Medium severity'), ('high', 'High severity')], max_length=25, null=True)),
                ('object_id', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(velodrome.lock8.models.FinalCausalityModelMixin, velodrome.lock8.models.NotificationMessageDeleteMixin, models.Model, velodrome.lock8.models.SendableModelMixin, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='FeedbackCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('name', models.CharField(max_length=50)),
                ('severity', models.CharField(blank=True, choices=[('low', 'Low severity'), ('medium', 'Medium severity'), ('high', 'High severity')], max_length=25, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='lock8.FeedbackCategory')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Firmware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('name', models.CharField(blank=True, max_length=30)),
                ('chip', models.CharField(choices=[('2', 'Mercury'), ('0', 'Nordic'), ('1', 'Xmega')], max_length=1)),
                ('version', models.CharField(blank=True, db_index=True, max_length=40)),
                ('binary', models.FileField(blank=True, max_length=254, storage=velodrome.lock8.models.private_storage, upload_to='firmwares')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], default='renter', max_length=25)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('old_tracking_attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='tracking_attributes', default=dict, null=True)),
                ('counter', models.PositiveIntegerField()),
                ('serial_number', models.CharField(max_length=64, unique=True)),
                ('imei', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(regex=re.compile('\\d{15}', 32))])),
                ('iccid', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(regex=re.compile('\\d{20}', 32))])),
                ('sid', models.CharField(blank=True, max_length=32, validators=[django.core.validators.RegexValidator(regex=re.compile('[a-fA-F\\d]{32}', 32))])),
                ('bleid', models.CharField(max_length=128, unique=True)),
                ('randblock', models.TextField(blank=True, max_length=2048)),
                ('type', models.CharField(choices=[('tracker', 'Tracker'), ('lock', 'Lock')], default='lock', max_length=7)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('locked_state', django_fsm.FSMField(db_index=True, default='unlocked', max_length=50)),
                ('mounted_state', django_fsm.FSMField(db_index=True, default='unmounted', max_length=50)),
                ('firmware_versions', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Dictionary of current/reported version per chip.')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LockFirmwareUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('firmware', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='firmwares', related_query_name='firmware', to='lock8.Firmware')),
                ('lock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locks', related_query_name='lock', to='lock8.Lock')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_messages', related_query_name='notification_message', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('name', models.CharField(max_length=255)),
                ('is_open_fleet', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, max_length=254, upload_to='icons')),
                ('phone_numbers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('allowed_signup_domain_names', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='The accepted list of email domain names for self-sign up.', validators=[velodrome.lock8.validators.validate_signup_domain_names])),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('feedback_category_tree', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organization', related_query_name='organization', to='lock8.FeedbackCategory')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='lock8.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('allowed_email_alert_types', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='List of enabled Alert types.\nCorresponds to enabled email notifications for each type.', validators=[velodrome.lock8.validators.validate_alert_types])),
                ('allowed_push_alert_types', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=['lock.bat.low', 'bicycle.ride_outside', 'lock.no_tracking', 'bicycle.return_outside', 'bicycle.lost_reported', 'bicycle.outside_operational_period', 'bicycle.too_long_idle', 'bicycle.left_unlocked', 'lock.shutdown', 'lock.locked_wo_cable', 'bicycle.bike_stolen', 'lock.alarm_triggered'], help_text='List of enabled Alert types\nCorresponds to enabled push notification for each type.', validators=[velodrome.lock8.validators.validate_alert_types])),
                ('alert_type_to_role_mapping', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='A dictionary in which the keys correspond to Alert types\nand values to Roles. Specified Alert types notify the\ncorresponding Role.', validators=[velodrome.lock8.validators.validate_alert_type_to_role_mapping])),
                ('ride_outside_alert_delay', models.DurationField(blank=True, default=None, help_text="Duration of presence outside of service area after which 'Outside service area' alert is triggered. Format: DAYS HOURS:MINS:SECS, e.g. 1 05:20:00", null=True)),
                ('name', models.CharField(blank=True, max_length=128)),
                ('allow_returning_bicycle_outside_drop_zone', models.BooleanField(default=True)),
                ('max_allowed_bicycles_per_renter', models.IntegerField(default=1)),
                ('currency', models.CharField(blank=True, choices=[('usd', 'U.S. Dollars'), ('gbp', 'Pounds (GBP)'), ('eur', 'Euros')], default='', max_length=10)),
                ('allow_renting_without_pricing_scheme', models.BooleanField(default=True)),
                ('timezone', models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Sydney', 'Australia/Sydney'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('GMT', 'GMT'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('US/Alaska', 'US/Alaska'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('UTC', 'UTC')], default='UTC', max_length=32)),
                ('operational_weekday_period', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, default=None, help_text='Operational hours during weekdays.', null=True, validators=[django.contrib.postgres.validators.RangeMinValueValidator(0), django.contrib.postgres.validators.RangeMaxValueValidator(24)])),
                ('operational_weekend_period', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, default=None, help_text='Operational hours during weekend.', null=True, validators=[django.contrib.postgres.validators.RangeMinValueValidator(0), django.contrib.postgres.validators.RangeMaxValueValidator(24)])),
                ('unit_system', models.CharField(choices=[('metric', 'Metric'), ('imperial', 'Imperial')], default='metric', max_length=9)),
                ('send_feedback_per_email', models.BooleanField(default=False)),
                ('send_task_per_email', models.BooleanField(default=False)),
                ('idle_bicycle_duration', models.DurationField(blank=True, default=None, help_text="Duration of inactivity after which 'Bicycle is idle for too long' alert is triggered. Format: DAYS HOURS:MINS:SECS, e.g. 1 05:20:00", null=True)),
                ('email_domain_validation', models.CharField(blank=True, default='', help_text='If set, invitations must be accepted with an email that belongs to that domain.', max_length=128)),
                ('duration_after_bicycle_is_lost', models.DurationField(blank=True, default=None, help_text="Duration of presence outside of service area after which bicycle is automatically transferred into 'Lost' state. Format: DAYS HOURS:MINS:SECS, e.g. 1 05:20:00", null=True)),
                ('max_inactive_rental_session_duration', models.DurationField(blank=True, default=None, help_text='Duration of inactivity after which current rental session is expired. Format: DAYS HOURS:MINS:SECS, e.g. 1 05:20:00', null=True)),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preference', related_query_name='preference', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('image', models.ImageField(blank=True, max_length=254, upload_to='photos')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', related_query_name='photo', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='PricingScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('max_daily_charged_amount', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=9, null=True)),
                ('time_ranges', django.contrib.postgres.fields.jsonb.JSONField(default=list, validators=[velodrome.lock8.validators.validate_time_ranges])),
                ('bicycle_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pricing_schemes', related_query_name='pricing_scheme', to='lock8.BicycleModel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_schemes', related_query_name='pricing_scheme', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='PrivateTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('timestamp', velodrome.lock8.fields.IndexedDateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('point', velodrome.lock8.fields.IndexedPointField(blank=True, db_index=True, editable=False, null=True, srid=4326)),
                ('state_of_charge', velodrome.lock8.fields.IndexedFloatJsonField(blank=True, db_index=True, editable=False, null=True)),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField()),
                ('gps_timestamp', velodrome.lock8.fields.IndexedDateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('bicycle', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='privatetrackings', related_query_name='privatetracking', to='lock8.Bicycle')),
                ('lock', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='privatetrackings', related_query_name='privatetracking', to='lock8.Lock')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='privatetrackings', related_query_name='privatetracking', to='lock8.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublicTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('timestamp', velodrome.lock8.fields.IndexedDateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('point', velodrome.lock8.fields.IndexedPointField(blank=True, db_index=True, editable=False, null=True, srid=4326)),
                ('state_of_charge', velodrome.lock8.fields.IndexedFloatJsonField(blank=True, db_index=True, editable=False, null=True)),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField()),
                ('gps_timestamp', velodrome.lock8.fields.IndexedDateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('bicycle', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='publictrackings', related_query_name='publictracking', to='lock8.Bicycle')),
                ('lock', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='publictrackings', related_query_name='publictracking', to='lock8.Lock')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='publictrackings', related_query_name='publictracking', to='lock8.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReadonlyTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('bicycle_uuid', models.UUIDField(blank=True, null=True)),
                ('device_uuid', models.UUIDField(blank=True, null=True)),
                ('organization_uuid', models.UUIDField(blank=True, null=True)),
                ('tracking_type', models.CharField(choices=[('GPS', 'GPS Location'), ('CEL', 'Cellular Location'), ('DSS', 'Device System Status'), ('BAT', 'Battery Message'), ('AWM', 'Ambient Weather'), ('AGM', 'Ambient Gas')], default='GPS', max_length=3)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField()),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'db_table': 'tracking',
                'managed': settings.IS_TESTER,
            },
        ),
        migrations.CreateModel(
            name='RentalSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('duration_of_rental_session', models.DurationField(blank=True, default=None, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9)),
                ('currency', models.CharField(choices=[('usd', 'U.S. Dollars'), ('gbp', 'Pounds (GBP)'), ('eur', 'Euros')], default='', max_length=10)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('bicycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rental_sessions', related_query_name='rental_session', to='lock8.Bicycle')),
                ('charge', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pinax_stripe.Charge')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('pricing_scheme', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rental_sessions', related_query_name='rental_session', to='lock8.PricingScheme')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RentingScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('max_reservation_duration', models.DurationField(blank=True, null=True)),
                ('bicycle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='renting_schemes', related_query_name='renting_scheme', to='lock8.Bicycle')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renting_schemes', related_query_name='renting_scheme', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('bicycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', related_query_name='reservation', to='lock8.Bicycle')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', related_query_name='reservation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SharedSecret',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('value', models.BinaryField(default=functools.partial(velodrome.lock8.models.generate_random_bytes, *(20,), **{}))),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('interval', models.CharField(choices=[('week', 'Week'), ('month', 'month'), ('year', 'year')], max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Amount (per period)')),
                ('interval_count', models.IntegerField(default=1)),
                ('trial_period_days', models.IntegerField(default=0)),
                ('statement_descriptor', models.TextField(blank=True)),
                ('available_dates', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, default=None, null=True)),
                ('weekdays', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, default=None, help_text='Days of the week, from 1 to 7 where Monday is 1.', null=True, validators=[django.contrib.postgres.validators.RangeMinValueValidator(1), django.contrib.postgres.validators.RangeMaxValueValidator(7)])),
                ('bicycle_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subscription_plans', related_query_name='subscription_plan', to='lock8.BicycleModel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plans', related_query_name='subscription_plan', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('plan', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pinax_stripe.Plan')),
                ('pricing_scheme', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plan', related_query_name='subscription_plan', to='lock8.PricingScheme')),
            ],
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('role', models.CharField(choices=[('renter', 'Renter'), ('fleet_operator', 'Fleet Operator'), ('admin', 'Admin'), ('mechanic', 'Mechanic'), ('security', 'Security'), ('spectator', 'Spectator'), ('production_software', 'Production Software')], default='mechanic', max_length=25)),
                ('context', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('state', django_fsm.FSMField(db_index=True, default='unassigned', max_length=50)),
                ('due', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('severity', models.CharField(blank=True, choices=[('low', 'Low severity'), ('medium', 'Medium severity'), ('high', 'High severity')], max_length=25, null=True)),
                ('is_due', models.BooleanField(default=False)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigned_tasks', related_query_name='assigned_task', to=settings.AUTH_USER_MODEL)),
                ('assignor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_tasks', related_query_name='created_task', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('maintenance_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tasks', related_query_name='task', to='lock8.BicycleModelMaintenanceRule')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', related_query_name='task', to='lock8.Organization')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(velodrome.lock8.models.FinalCausalityModelMixin, models.Model, velodrome.lock8.models.SendableModelMixin),
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('timestamp', velodrome.lock8.fields.IndexedDateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('point', velodrome.lock8.fields.IndexedPointField(blank=True, db_index=True, editable=False, null=True, srid=4326)),
                ('state_of_charge', velodrome.lock8.fields.IndexedFloatJsonField(blank=True, db_index=True, editable=False, null=True)),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField()),
                ('time_stamp', velodrome.lock8.fields.IndexedPositiveIntegerJsonField(blank=True, db_index=True, editable=False, null=True)),
                ('message_uuid', models.UUIDField(blank=True, default=None, null=True, unique=True)),
                ('message_timestamp', models.DateTimeField(blank=True, default=None, null=True)),
                ('tracking_type', models.CharField(choices=[('GPS', 'GPS Location'), ('CEL', 'Cellular Location'), ('DSS', 'Device System Status'), ('BAT', 'Battery Message'), ('AWM', 'Ambient Weather'), ('AGM', 'Ambient Gas')], default='GPS', max_length=3)),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('bicycle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trackings', related_query_name='tracking', to='lock8.Bicycle')),
                ('lock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trackings', related_query_name='tracking', to='lock8.Lock')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trackings', related_query_name='tracking', to='lock8.Organization')),
            ],
            options={
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('bicycle_uuid', models.UUIDField(blank=True, null=True)),
                ('organization_uuid', models.UUIDField(blank=True, null=True)),
                ('start_date', models.DateTimeField(db_column='started')),
                ('end_date', models.DateTimeField(blank=True, db_column='ended', null=True)),
                ('route', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('snapped_route', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('distance_m', models.IntegerField(blank=True, null=True, verbose_name='Distance (m)')),
                ('serial_number', models.CharField(max_length=24)),
                ('gps_average_accuracy', models.FloatField(blank=True, null=True)),
                ('gps_time_first_fix', models.IntegerField(blank=True, null=True)),
                ('gps_timeout_events', models.IntegerField(blank=True, null=True, verbose_name='GPS timeouts')),
                ('cell_time_connect', models.IntegerField(blank=True, null=True)),
                ('cell_timeout_events', models.IntegerField(blank=True, null=True, verbose_name='cell timeouts')),
                ('state_charge_start', models.FloatField(blank=True, null=True)),
                ('state_charge_end', models.FloatField(blank=True, null=True)),
                ('is_valid', models.NullBooleanField(verbose_name='valid')),
                ('asset_state', models.CharField(choices=[('in_service', 'In service'), ('in_maintenance', 'In maintenace'), ('private', 'Private')], max_length=14)),
                ('type', models.CharField(choices=[('regular', 'regular'), ('suspicious', 'suspicious')], max_length=10)),
                ('last_gps_accuracy', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'trip',
                'ordering': ('-start_date',),
                'managed': settings.IS_TESTER,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('phone_numbers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('concurrency_version', concurrency.fields.IntegerVersionField(default=1, help_text='record revision number')),
                ('state', django_fsm.FSMField(db_index=True, default='new', max_length=50)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('type', models.CharField(choices=[('dropzone', 'Dropzone'), ('cycling_area', 'Service Area'), ('maintenance', 'Maintenance')], default='dropzone', max_length=12)),
                ('is_maintenance', models.BooleanField(default=False)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones', related_query_name='zone', to='lock8.Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('preferred_mechanic', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='zones', related_query_name='zone', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, velodrome.lock8.models.OrganizationOwnedModelMixin),
        ),
        migrations.AddField(
            model_name='rentalsession',
            name='subscription_plan',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rental_sessions', related_query_name='rental_session', to='lock8.SubscriptionPlan'),
        ),
        migrations.AddField(
            model_name='rentalsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rental_sessions', related_query_name='rental_session', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lock',
            name='firmwares',
            field=models.ManyToManyField(blank=True, through='lock8.LockFirmwareUpdate', to='lock8.Firmware'),
        ),
        migrations.AddField(
            model_name='lock',
            name='latest_dss_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.Tracking'),
        ),
        migrations.AddField(
            model_name='lock',
            name='latest_gps_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.Tracking'),
        ),
        migrations.AddField(
            model_name='lock',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locks', related_query_name='lock', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='lock',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lock',
            name='private_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.PrivateTracking'),
        ),
        migrations.AddField(
            model_name='lock',
            name='public_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.PublicTracking'),
        ),
        migrations.AddField(
            model_name='lock',
            name='shared_secret',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lock', to='lock8.SharedSecret'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', related_query_name='invitation', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invitation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invitations', related_query_name='invitation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='firmware',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='firmwares', related_query_name='firmware', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='firmware',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', related_query_name='feedback', to='lock8.FeedbackCategory'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', related_query_name='feedback', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feedback',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', related_query_name='feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feature',
            name='organizations',
            field=models.ManyToManyField(related_name='features', related_query_name='features', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='feature',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clientapp',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='clientapp',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clientapp',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bicyclemodel',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bicycle_models', related_query_name='bicycle_model', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='bicyclemodel',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bicyclemodel',
            name='photo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lock8.Photo'),
        ),
        migrations.AddField(
            model_name='bicyclemodel',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bicycle_models', related_query_name='bicycle_model', to='lock8.BicycleType'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='latest_gps_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.Tracking'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='lock',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lock8.Lock'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bicycles', related_query_name='bicycle', to='lock8.BicycleModel'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bicycles', related_query_name='bicycle', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='private_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.PrivateTracking'),
        ),
        migrations.AddField(
            model_name='bicycle',
            name='public_tracking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lock8.PublicTracking'),
        ),
        migrations.AddField(
            model_name='axalock',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='axa_locks', related_query_name='axa_lock', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='axalock',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='alert',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', related_query_name='alert', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='alert',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='alert',
            name='tracking',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', related_query_name='alert', to='lock8.Tracking'),
        ),
        migrations.AddField(
            model_name='alert',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', related_query_name='alert', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', related_query_name='affiliation', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', related_query_name='affiliation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='address',
            name='organization',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', related_query_name='address', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='address',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='organizations',
            field=models.ManyToManyField(blank=True, related_name='members', related_query_name='member', through='lock8.Affiliation', to='lock8.Organization'),
        ),
        migrations.AddField(
            model_name='user',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lock8.UserProfile'),
        ),
        migrations.AddField(
            model_name='user',
            name='representative',
            field=models.ForeignKey(blank=True, help_text='The target is returned during authentication', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shadowed_users', related_query_name='shadowed_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='subscriptionplan',
            unique_together=set([('organization', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='affiliation',
            unique_together=set([('user', 'organization', 'role')]),
        ),
    ]
