on:
  push:
    branches:
      - dev

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: velodrome

name: Deploy `velodrome` to ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Pulling sub module.
      run: |
        git submodule sync --recursive
        git submodule update --init

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        python-version: "3.8"

    - name: Run coverage
      run: |
        pip install pipenv
        pipenv install --dev && pipenv install codecov --skip-lock

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        # Build a docker container and push it to ECR
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:velodrome-$(git rev-parse --short HEAD) --no-cache .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:velodrome-$(git rev-parse --short HEAD)
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:velodrome-$(git rev-parse --short HEAD)"